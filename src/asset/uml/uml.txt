@startuml

abstract class Team {
    +initialize()
    +clear()
    +addMember(character: Character) : void
    +isWipedOut() : boolean
    +getMembers() : table<Character>
    +getNumMembers() : number
    +getFocusedMember() : Character
    +getMoney() : number
    +increaseMoney(amount: number) : void
    +update(dt: number) : void
    +draw() : void
    -members : table<Character>
    -numMembers : number
    -focusedMember : Entity
}

class CharacterTeam {
    +initialize()
    +distributeExperience()
    +keypressed(key) : void
    +update(dt: number)
    +draw() : void
}

class EnemyTeam {
    +initialize()
    +update(dt: number)
    +draw()
}

class Entity {
    +initialize(stats: table, x: number, y: number)
    +getEntityName(): string
    +getX(): number
    +getY(): number
    +getFWidth(): number
    +getFHeight(): number
    +getSpeed(): number
    +getHealth(): number
    +getMaxHealth(): number
    +getStats(): table
    +getBattleStats(): table
    +getSkills(): table
    +isAlive(): boolean
    +raiseBattleStat(stat_name: string): void
    +setPos(x: number, y: number): void
    +setDXDY(dx: number, dy: number): void
    +setSubdir(subdir: string): void
    +setMovementState(state: MovementState): void
    +heal(amount: number): void
    +takeDamage(amount: number): void
    +resetStatModifiers(): void
    +setAnimations(subdir: string): void
    +populateFrames(frames: table, numFrames: number, image: Image): void
    +update(dt: number): void
    +draw(): void

    -baseStats: table
    -battleStats: table
    -skillList: table
    -idleFrames: table
    -subdir: string
    -entityName: string
    -x: number
    -y: number
    -dX: number
    -dY: number
    -frameWidth: number
    -frameHeight: number
    -movementState: MovementState
    -currentFrame: number
    -idleImage: Image
    -moveXImage: Image
    -flinchImage: Image
    -koImage: Image
}

class Skill {
    +initialize(skillDict: table, width: number, height: number)
    +getSkillDict() : table
    +newAnimation(path: string, width: number, height: number, duration: number) : table
    +update(dt) : void
    +draw() : void
    -skill: table
    -hitType: string
    -animation: table<
    -projectiles: table<Projectile>
    -frameCount: number
    -projectileCount: number
    -projectileRate: number
    -projectileCountLimit: number
    -projectileAnimation: table
}

class Character {
    +initialize(stats: table, actionButton: string)
    +setBaseSkills(): void
    +gainExp(amount: number): void
    +getRequiredExperience(lvl: number): number
    +updateSkills(lvl: number): void
    +getCurrentSkills(): table
    +getUIState(): UIState
    +setSelectedSkill(): void
    +keypressed(key: string): void
    +update(dt: number): void
    +draw(): void

    -actionButton: string
    -fp: number
    -basic: Skill
    -current_skills: table
    -level: number
    -totalExp: number
    -experience: number
    -experienceRequired: number
    -offenseState: OffenseState
    -defenseState: DefenseState
    -selectedSkill: Skill

    {static} -EXP_POW_SCALE: number = 1.8
    {static} -EXP_MULT_SCALE: number = 4
    {static} -EXP_BASE_ADD: number = 10
    {static} -yPos: number = 100
    {static} -xPos: number = 100
}

class Enemy {
    +initialize(enemyName: string, enemyType: string)
    +getExpReward() : number
    +setExpReward(amount: number) : void
    +getMoneyReward() : number
    +setMoneyReward(moneyReward: number)
    +selectAttack() : Skill
    +draw()
    -stats : table
    -expReward: number
    -moneyReward: number
    -selectedSkill: Skill
}

class MovementState {
    +initialize(x: number, y: number, frameHeight: number)
    +getPosition() : table<number>
    +setPosition(x: number, y: number) : void
    +moveTowards(tX: number, tY: number) : void
    +getState() : string
    +setState(state: string) : void
    +isGrounded(groundLevel: number, y: number, frameHeight: number) : boolean
    +applyGravity(dt: number) : void
    +update(dt: number): void
}

class OffenseState {
    +initialize(actionButton: string, battleStats: table)
    +getSkill() : Skill
    +setSkill(skillObj : Skill)
    +setTargetXY(x: number, y: number)
    +resolveProc(proc: number) : boolean
    +setActionButton(newButton : string) : void
    +startFrameWindow() : void
    +updateBadInputPenalty(applyPenalty: boolean) : void
    +calcDamage() : void
    +applyBonus() : void
    +clearSkillModifiers() : void
    +keypressed(key) : void
    +update(dt: number) : void
    +draw() : void
    -stats : table
    -damage : number
    -bonus: number
    -actionButton: string
    -frameCount: number
    -frameWIndow: number
    -isWindowActive: boolean
    -actionButtonPressed: boolean
    -badInputPenalty: number
    -bonusApplied: boolean
}

class DefenseState {
    +initialize(baseDefense: number, blockBonus: number, blockWindw: number, dodgeWindow: number)
    +setActionButton(newButton: string) : void
    +startFrameWindow() : void
    +updateBadInputPenalty(applyPenalty: boolean) : void
    +applyBonus() : void
    +keypressed(key) : void
    +update(dt: number) : void
    -defense: number
    -blockBonus: number
    -actionButton: string
    -frameCount: number
    -frameWindow: number
    -isWindowActive: boolean
    -actionButtonPressed: boolean 
    -badInputPenalty: number
}

class ActionUI {
    +initialize(x: number, y: number, skillList: table<Skill>)
    +getPos() : table
    +setPos(x: number, y: number) : void
    +setActiveAction(action: string) : void
    +getUIState() : string
    +keypressed(key) : void
    +targetEnemy(x: number, y:number) : void
    +update(dt: number) : void
    +draw() : void
    -uiState: string
    -soloButton:Image
    -flourButton:Image
    -duoButton:Image
    -activeAction:string
    -centerX: number
    -soloX: number
    -flourX: number
    -duoX: number
    -y: number
    -soloDest: number
    -flourDest: number
    -duoDest: number
    -soloScale: number
    -flourScale: number
    -duoScale: number
    -soloDX: number
    -flourDX: number
    -duoDX: number
    -skillList: table<Skill>
    {static} -SOLO_BUTTON_PATH: string
    {static} -FLOUR_BUTTON_PATH: string
    {static} -DUO_BUTTON_PATH: string
    {static} -ICON_SPACER: number
    {static} -ICON_SCALE: number
    {static} -SCALE_FACTOR: number
    {static} -ICON_ROTATION: number
    {static} -ICON_BASE_DX: number 

}

class Button {
    +initialize(x: number, y: number)
    +getButton() : Image
    +getPos() : table
    +setPos(x: number, y: number)
    +setScaleFactor(scale) : void
    +update(dt) : void
    +draw() : void
    -button: Image
    -scaleFactor
    -x: number
    -tX: number
    -dx: number
    -y: number

}

class SoloButton {
    +initialize(x: number, y: number)
    +keypressed(key) : void
    +update(dt) : void
    +draw() : void
}

class FlourButton {
    +initialize(x: number, y: number, currentFP: number, skillList: table<Skill>)
    +formatSkillList() : string
    +keypressed(key) : void
    +update(dt) : void
    +draw() : void
    -skillList : table<Skill>
    -skillListHolder: Image
    -skillListCursor: Image
    -selectedSkill: Skill
    -currentFP: number
}

class DuoButton {
    +initialize(x: number, y: number, currentDP: number, skillList: table<Skill>)
    +formatSkillList() : string
    +keypressed(key) : void
    +update(dt) : void
    +draw() : void
    -skillList : table<Skill>
    -skillListHolder: Image
    -skillListCursor: Image
    -selectedSkill: Skill
    -currentDP: number
}

Entity o-- Skill : uses
Entity o-- MovementState : has
Entity <|-- Character
Entity <|-- Enemy
Character o-- OffenseState : has
Character o-- DefenseState : has
Character o-- ActionUI : has
Team <|-- CharacterTeam
Team <|-- EnemyTeam
Team "1" o-- "0..*" Character : composes
SoloButton <|-- Button
FlourButton <|-- Button
DuoButton <|-- Button
ActionUI "1" -- "3" Button : composes 
@enduml
